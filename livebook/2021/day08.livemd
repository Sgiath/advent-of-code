# Year 2021, Day 08

## Section

https://adventofcode.com/2021/day/8

## Input

```elixir
alias AdventOfCode.Year2021.Day08

test_input = """
be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb | fdgacbe cefdb cefbgd gcbe
edbfga begcd cbg gc gcadebf fbgde acbgfd abcde gfcbed gfec | fcgedb cgb dgebacf gc
fgaebd cg bdaec gdafb agbcfd gdcbef bgcad gfac gcb cdgabef | cg cg fdcagb cbg
fbegcd cbd adcefb dageb afcb bc aefdc ecdab fgdeca fcdbega | efabcd cedba gadfec cb
aecbfdg fbg gf bafeg dbefa fcge gcbea fcaegb dgceab fcbdga | gecf egdcabf bgf bfgea
fgeab ca afcebg bdacfeg cfaedg gcfdb baec bfadeg bafgc acf | gebdcfa ecba ca fadegcb
dbcfg fgd bdegcaf fgec aegbdf ecdfab fbedc dacgb gdcebf gf | cefg dcbef fcge gbcadfe
bdfegc cbegaf gecbf dfcage bdacg ed bedf ced adcbefg gebcd | ed bcgafe cdgba cbgef
egadfb cdbfeg cegd fecab cgb gbdefca cg fgcdab egfdb bfceg | gbdfcae bgc cg cgb
gcafb gcf dcaebfg ecagb gf abcdeg gaef cafbge fdbac fegbdc | fgae cfgab fg bagce
"""

task_input = File.read!("priv/2021/day08.in")

input =
  test_input
  |> String.split([" ", " | ", "\n"], trim: true)
  |> Enum.map(&(&1 |> String.graphemes() |> Enum.sort()))
  |> Enum.chunk_every(14)
  |> Enum.map(&Enum.chunk_every(&1, 10))
  |> Enum.map(fn [signal, output] ->
    {Enum.sort_by(signal, &length/1), output}
  end)
```

## Part 1

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input
|> Enum.flat_map(fn {_signal, output} -> output end)
|> Enum.count(&(length(&1) in [2, 3, 4, 7]))
```

## Part 2

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input
|> Enum.map(fn {signal, output} ->
  signal
  |> Enum.reduce(%{}, &Day08.find_digits/2)
  |> Enum.into(%{}, fn {key, val} -> {val, Integer.to_string(key)} end)
  |> then(&{&1, output})
end)
|> Enum.map(fn {mapping, output} ->
  output
  |> Enum.map_join(&Map.get(mapping, &1))
  |> String.to_integer()
end)
|> Enum.sum()
```
