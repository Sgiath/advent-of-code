# Year 2021, Day 06

## Section

https://adventofcode.com/2021/day/6

## Input

```elixir
alias AdventOfCode.Year2021.Day06

test_input = """
3,4,3,1,2
"""

task_input = File.read!("priv/2021/day06.in")

input =
  task_input
  |> String.split([",", "\n"], trim: true)
  |> Enum.map(&String.to_integer/1)
  |> Enum.frequencies()
```

## Part 1

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day06.part1(input)
```

## Part 2

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day06.part2(input)
```

## Matrix

The problem can also be solved mathematically by solving this matrix which will give
us matrix containing number of fish for each timer at last day of simulation. The
final solution is to just sum the whole matrix.

<!-- livebook:{"break_markdown":true} -->

$$
\begin{bmatrix}
  0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 1 \\
  1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
  0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
  0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\
  0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\
  0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\
  0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\
  0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\
  0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0
\end{bmatrix}^{days - 1} \cdot \begin{bmatrix}
  0 & timer 1 & timer 2 & timer 3 & timer 4 & timer 5 & 0 & 0 & 0
\end{bmatrix}

<!-- livebook:{"break_markdown":true} -->

So for the example input the matrix will look like this

<!-- livebook:{"break_markdown":true} -->

$$
\begin{bmatrix}
  0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 1 \\
  1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
  0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
  0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\
  0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\
  0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\
  0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\
  0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\
  0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0
\end{bmatrix}^{255} \cdot \begin{bmatrix}0 & 1 & 1 & 2 & 1 & 0 & 0 & 0 & 0\end{bmatrix}
$$

<!-- livebook:{"break_markdown":true} -->

Here is the describet operation implemented with `Nx`:

```elixir
import Nx, only: :sigils

day = ~M"""
0 0 0 0 0 0 1 0 1
1 0 0 0 0 0 0 0 0
0 1 0 0 0 0 0 0 0
0 0 1 0 0 0 0 0 0
0 0 0 1 0 0 0 0 0
0 0 0 0 1 0 0 0 0
0 0 0 0 0 1 0 0 0
0 0 0 0 0 0 1 0 0
0 0 0 0 0 0 0 1 0
"""

# Nx doesn't have matrix power function yet
simulation = Enum.reduce(1..255, day, fn _index, acc -> Nx.dot(acc, day) end)

[0, 1, 1, 2, 1, 0, 0, 0, 0]
|> Nx.tensor()
|> Nx.dot(simulation)
|> Nx.sum()
|> Nx.to_number()
```
