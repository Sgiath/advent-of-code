<!-- vim: syntax=markdown -->

# Year 2021, Day 06

## Section

<https://adventofcode.com/2021/day/6>

```elixir
alias AdventOfCode.Year2021.Day06
```

## Input

```elixir
input = Day06.test_input()
```

## Part 1

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day06.part1(input)
```

## Part 2

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Day06.part2(input)
```

## Matrix

The problem can also be solved mathematically by solving this matrix which will give
us matrix containing number of fish for each timer at last day of simulation. The
final solution is to just sum the whole matrix.

<!-- livebook:{"break_markdown":true} -->

$$
\begin{bmatrix}
  0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 1 \\
  1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
  0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
  0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\
  0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\
  0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\
  0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\
  0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\
  0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0
\end{bmatrix}^{days - 1} \cdot \begin{bmatrix}
  0 & timer 1 & timer 2 & timer 3 & timer 4 & timer 5 & 0 & 0 & 0
\end{bmatrix}

<!-- livebook:{"break_markdown":true} -->

So for the example input the matrix will look like this

<!-- livebook:{"break_markdown":true} -->

$$
\begin{bmatrix}
  0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 1 \\
  1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
  0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\
  0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 & 0 \\
  0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 & 0 \\
  0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 & 0 \\
  0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 & 0 \\
  0 & 0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\
  0 & 0 & 0 & 0 & 0 & 0 & 0 & 1 & 0
\end{bmatrix}^{255} \cdot \begin{bmatrix}0 & 1 & 1 & 2 & 1 & 0 & 0 & 0 & 0\end{bmatrix}

<!-- livebook:{"break_markdown":true} -->

Here is the described operation implemented with `Nx`:

```elixir
import Nx, only: :sigils

input_data = Nx.tensor([0, 1, 1, 2, 1, 0, 0, 0, 0])

day_matrice = ~M"""
0 0 0 0 0 0 1 0 1
1 0 0 0 0 0 0 0 0
0 1 0 0 0 0 0 0 0
0 0 1 0 0 0 0 0 0
0 0 0 1 0 0 0 0 0
0 0 0 0 1 0 0 0 0
0 0 0 0 0 1 0 0 0
0 0 0 0 0 0 1 0 0
0 0 0 0 0 0 0 1 0
"""

# Nx doesn't have matrix power function yet
simulation_matrice =
  Enum.reduce(1..255, day_matrice, fn _index, acc ->
    Nx.dot(acc, day_matrice)
  end)
```

We can also precompute the sum of the days before we apply final dot product

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
simulation_matrice = Nx.sum(simulation_matrice, axes: [1])
```

Also the input data doesn't contain any fish with timer 0, 6, 7 or 8 so we can ignore
those values from both matrices to speed-up the computation

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
simulation_matrice = Nx.slice(simulation_matrice, [1], [5]) |> IO.inspect()

input_data = Nx.slice(input_data, [1], [5])
```

Than we can do the final dot product

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
result = Nx.dot(input_data, simulation_matrice)
```

And convert it to the number from the tensor

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Nx.to_number(result)
```
